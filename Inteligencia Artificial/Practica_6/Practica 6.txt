1.-

	a:  (setq prob-canib (make-cannibal-problem :initial-state (make-cannibal-state :m1 2 :c1 2 :b1 1)))
#<a CANNIBAL-PROBLEM>

	    (setq result (A*-search prob-canib))

10 
#<NODE f(5) = g(5) + h(0) state:(0 0 0 2 2 1)>


	b:  (setq prob-canib (make-cannibal-problem :initial-state (make-cannibal-state :m1 3 :c1 3 :b1 1)))
#<a CANNIBAL-PROBLEM>

	    (set result (A*-search prob-canib))

15 
#<NODE f(11) = g(11) + h(0) state:(0 0 0 3 3 1)>


	c:  (setq prob-canib (make-cannibal-problem :initial-state (make-cannibal-state :m1 4 :c1 4 :b1 2)))
#<a CANNIBAL-PROBLEM>

	    (setq result (A*-search prob-canib))

30 
#<NODE f(10) = g(10) + h(0) state:(0 0 0 4 4 2)>


	d:   (setq prob-canib (make-cannibal-problem :initial-state (make-cannibal-state :m1 5 :c1 5 :b1 3)))
#<a CANNIBAL-PROBLEM>

	     (setq result (A*-search prob-canib))

45 
#<NODE f(11) = g(11) + h(0) state:(0 0 0 5 5 3)>



2.- 

	No está definido el h-cost, por lo que no se puede hacer ningún tipo de comprobación.

3.- 

(defmethod h-cost ((problem 8-puzzle-problem) state)
  (let ((tile (8-puzzle-ref state square)))
    (and (/= tile 0)
	 (/= tile (8-puzzle-ref *8-puzzle-goal* square)))))
