(defun ej1 ()
  (format t "~%~%Ejercicio 1.-~%")
  (setq lista '(Pepe jose juan luis))
  (setq lista (append lista '(carlos teorodo)))
  (format t "~%1: ~A" lista)
  (setq lista (reverse (append '(david) (reverse lista))))
  (format t "~%2: ~A" lista)
  (setq lista (cons (first lista) (cons (second (reverse lista)) (nthcdr 2 lista))))
  (format t "~%3: ~A" lista)
  (setq lista (cons (first lista) (third lista)))
  (format t "~%4: ~A" lista)
  (setq lista (reverse (nthcdr 2 (reverse lista))))
  (format t "~%5: ~A" lista)
)

(defun ej2 ()
  (format t "~%~%Ejercicio 2.-~%")
  (format t "~%1a: 1 < 2 = ~A" (< 1 2))
  (format t "~%1b: 2 < 1 = ~A" (< 2 1))
  (format t "~%2a: 1 <= 2 = ~A" (<= 1 2))
  (format t "~%2b: 2 <= 1 = ~A" (<= 2 1))
  (format t "~%3a: (zerop 0) = ~A" (zerop 0))
  (format t "~%3b: (zerop 1) = ~A" (zerop 1))
  (format t "~%4a: (numberp 3) = ~A" (numberp 3))
  (format t "~%4b: (numberp (cons 4 2)) = ~A" (numberp (cons 4 2)))
  (format t "~%5a: (symbolp 'letra) = ~A" (symbolp 'letra))
  (format t "~%5b: (symbolp 1) = ~A" (symbolp 1))
  (format t "~%6a: (atom 23) = ~A" (atom 23))
  (format t "~%6b: (atom '(1 2)) = ~A" (atom '(1 2)))
  (format t "~%7a: (constantp 1) = ~A" (constantp 1))
  (format t "~%7b: (constantp 'letra) = ~A" (constantp 'letra))
  (format t "~%8a: (listp '(1 2)) = ~A" (listp '(1 2)))
  (format t "~%8b: (listp 1) = ~A" (listp 1))
)

(defun x/2 (x)
  (/ x 2)
)

(defun x/3 (x)
  (/ x 3)
)

(defun x/4 (x)
  (/ (/ x 2) 2)
)

(defun x/5 (x)
  (/ x 5)
)

(defun x/6 (x)
  (/ (/ x 2) 3)
)

(defun x/7 (x)
  (/ x 7)
)

(defun x/8 (x)
  (x/2 (x/4 x))
)

(defun x/9 (x)
  (x/3 (x/3 x))
)

(defun ej3 ()
  (format t "~%~%Ejercicio 3.-~%")
  (format t "~%1/2 = ~A" (x/2 1))
  (format t "~%1/3 = ~A" (x/3 1))
  (format t "~%1/4 = ~A" (x/4 1))
  (format t "~%1/5 = ~A" (x/5 1))
  (format t "~%1/6 = ~A" (x/6 1))
  (format t "~%1/7 = ~A" (x/7 1))
  (format t "~%1/8 = ~A" (x/8 1))
  (format t "~%1/9 = ~A" (x/9 1))
)

(defun quien-lo-sabe (lst1 lst2)
  (cond ((= (nth 2 lst1) (nth 3 (reverse lst2)))
         (- (length lst1) (* 2 (length lst2))))
        ((<= (length lst1) (length lst2)) (length lst2))
        (t (length lst1)))
)

(defun ej4 ()
  (format t "~%~%Ejercicio 4.-~%")
  (format t "~% 1: Para que la funcion quien-lo-sabe devuelva un 5 hay que pasarle una lista de tamaño 5 y otra menor o igual.")
  (format t "~% 2: Para que falle, hay que pasarle una de las listas vacías.")
)

(defun circula-dir (lista dir)
   (cond ((eq dir 'left)
	    (setq liste  (append (last lista) (cddr (reverse lista))))
	    (setq lista (append (list (second (reverse lista))) liste))
	 )
 	 ((eq dir 'right)
	    (setq liste (append (list (first lista)) (list (second lista))))
	    (setq lista (append (cddr lista) liste))
	 )
	 (t
	    (format t "La dirección dada es errónea.~%")
	 )
   )
)

(defun ej5 ()
  (format t "~%~%Ejercicio 5.-~%")
  (format t "~%Sea una lista (1 2 3 4 5 6)")
  (setq lista '(1 2 3 4 5 6))
  (circula-dir lista 'left)
  (format t "~%circula-dir (lista 'left) = ~A" lista)
  (setq lista '(1 2 3 4 5 6))
  (circula-dir lista 'right)
  (format t "~%circula-dir (lista 'right) = ~A" lista)
  (setq lista '(1 2 3 4 5 6))
  (format t "~%circula-dir (lista 'otracosa) = ")
  (circula-dir lista 'otracosa)
)

(defun ejercicio_1()
 (ej1)
 (ej2)
 (ej3)
 (ej4)
 (ej5)
)
