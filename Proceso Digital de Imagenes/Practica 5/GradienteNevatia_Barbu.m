function [ salida ] = GradienteNevatia_Barbu( img )
     N = 12;
        
    k(:,:,1) = [  100/1000, 100/1000,        0,-100/1000,-100/1000;
                  100/1000, 100/1000,        0,-100/1000,-100/1000;
                  100/1000, 100/1000,        0,-100/1000,-100/1000;
                  100/1000, 100/1000,        0,-100/1000,-100/1000;
                  100/1000, 100/1000,        0,-100/1000,-100/1000];
    k(:,:,2) = [  100/1102, -32/1102,-100/1102,-100/1102,-100/1102;
                  100/1102,  78/1102, -92/1102,-100/1102,-100/1102;
                  100/1102, 100/1102,        0,-100/1102,-100/1102;
                  100/1102, 100/1102,  92/1102, -78/1102,-100/1102;
                  100/1102, 100/1102, 100/1102,  32/1102,-100/1102];
    k(:,:,3) = [ -100/1102,-100/1102,-100/1102,-100/1102,-100/1102;
                   32/1102, -78/1102,-100/1102,-100/1102,-100/1102;
                  100/1102,  92/1102,        0, -92/1102,-100/1102;
                  100/1102, 100/1102, 100/1102,  78/1102, -32/1102;
                  100/1102, 100/1102, 100/1102, 100/1102, 100/1102];
    k(:,:,4) = [ -100/1000,-100/1000,-100/1000,-100/1000,-100/1000;
                 -100/1000,-100/1000,-100/1000,-100/1000,-100/1000;
                         0,        0,        0,        0,        0;
                  100/1000, 100/1000, 100/1000, 100/1000, 100/1000;
                  100/1000, 100/1000, 100/1000, 100/1000, 100/1000];
    k(:,:,5) = [ -100/1102,-100/1102,-100/1102,-100/1102,-100/1102;
                 -100/1102,-100/1102,-100/1102, -78/1102,  32/1102;
                 -100/1102, -92/1102,        0,  92/1102, 100/1102;
                  -32/1102,  78/1102, 100/1102, 100/1102, 100/1102;
                  100/1102, 100/1102, 100/1102, 100/1102, 100/1102];
    k(:,:,6) = [ -100/1102,-100/1102,-100/1102, -32/1102, 100/1102;
                 -100/1102,-100/1102, -92/1102,  78/1102, 100/1102;
                 -100/1102,-100/1102,        0, 100/1102, 100/1102;
                 -100/1102, -78/1102,  92/1102, 100/1102, 100/1102;
                 -100/1102,  32/1102, 100/1102, 100/1102, 100/1102];
    k(:,:,7) = [ -100/1000,-100/1000,        0, 100/1000, 100/1000;
                 -100/1000,-100/1000,        0, 100/1000, 100/1000;
                 -100/1000,-100/1000,        0, 100/1000, 100/1000;
                 -100/1000,-100/1000,        0, 100/1000, 100/1000;
                 -100/1000,-100/1000,        0, 100/1000, 100/1000];
    k(:,:,8) = [ -100/1102,  32/1102, 100/1102, 100/1102, 100/1102;
                 -100/1102, -78/1102,  92/1102, 100/1102, 100/1102;
                 -100/1102,-100/1102,        0, 100/1102, 100/1102;
                 -100/1102,-100/1102, -92/1102,  78/1102, 100/1102;
                 -100/1102,-100/1102,-100/1102, -32/1102, 100/1102];
    k(:,:,9) = [  100/1102, 100/1102, 100/1102,100/1102 , 100/1102;
                  -32/1102,  78/1102, 100/1102,100/1102 , 100/1102;
                 -100/1102, -92/1102,        0,92/1102  , 100/1102;
                 -100/1102,-100/1102,-100/1102,-78/1102 ,  32/1102;
                 -100/1102,-100/1102,-100/1102,-100/1102,-100/1102];
    k(:,:,10) = [ 100/1000, 100/1000, 100/1000, 100/1000, 100/1000;
                  100/1000, 100/1000, 100/1000, 100/1000, 100/1000;
                         0,        0,        0,        0,        0;
                 -100/1000,-100/1000,-100/1000,-100/1000,-100/1000;
                 -100/1000,-100/1000,-100/1000,-100/1000,-100/1000];
    k(:,:,11) = [ 100/1102, 100/1102, 100/1102, 100/1102, 100/1102;
                  100/1102, 100/1102, 100/1102,  78/1102, -32/1102;
                  100/1102,  92/1102,        0, -92/1102,-100/1102;
                   32/1102, -78/1102,-100/1102,-100/1102,-100/1102;
                 -100/1102,-100/1102,-100/1102,-100/1102,-100/1102];
    k(:,:,12) = [ 100/1102, 100/1102, 100/1102,  32/1102,-100/1102;
                  100/1102, 100/1102,  92/1102, -78/1102,-100/1102;
                  100/1102, 100/1102,        0,-100/1102,-100/1102;
                  100/1102,  78/1102, -92/1102,-100/1102,-100/1102;
                  100/1102, -32/1102,-100/1102,-100/1102,-100/1102];
    for i=3:1:N
        k(:,:,i)=rot90(k(:,:,i-2));
    end
    
    G = zeros(size(img,1),size(img,2),N);
    [x,y] = size(img);
    img2 = zeros(x+4,y+4);
    img2(3:x+2,3:y+2) = img;
    
    for i=1:1:N
        for j=3:x
            for l=3:y
                salida(j-2,l-2) = sum(sum(img2(j-2:1:j+2,l-2:1:l+2).*k(:,:,i)));
            end
        end
    end
    
    % Se selecciona el maximo de cada filtro
    salida = max (abs(salida),[],3);
    salida = uint8(salida.*255./max(max(salida)));
end

