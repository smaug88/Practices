import java.nio.*;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.app.Activity;
import android.content.Context;
import android.opengl.GLSurfaceView;
import android.opengl.GLU;
import android.os.Bundle;
import android.view.MotionEvent;
import android.util.Log;


public class DGCActivity extends Activity {
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mGLView = new ClearGLSurfaceView(this);
        setContentView(mGLView);
        
    }

    @Override
    protected void onPause() {
        super.onPause();
        mGLView.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mGLView.onResume();
    }

    private GLSurfaceView mGLView;
}

class ClearGLSurfaceView extends GLSurfaceView {
    public ClearGLSurfaceView(Context context) {
        super(context);
        mRenderer = new ClearRenderer();
        setRenderer(mRenderer);
    }
    private float oldX = 0;
    private float oldY = 0;
    
    public boolean onTouchEvent(final MotionEvent event) {
        queueEvent(new Runnable(){
            public void run() {
            	if (event.getAction()== MotionEvent.ACTION_DOWN) {
            		oldX = event.getX();
            		oldY = event.getY();
            	}
            	mRenderer.moveView(event.getX() - oldX, event.getY() - oldY);

            }});
            return true;
        }

        ClearRenderer mRenderer;
}

class ClearRenderer implements GLSurfaceView.Renderer {
	private FloatBuffer VertexBuffer;
	private ShortBuffer IndexBuffer;
	private float movX = 0;
    private float movY = 0;
	private float[] Vertices = new float[]{
			  -1f, -1f, -4f,
		       -1f, 1f, -4f,  
		       1f, -1f, -4f,  
		       1f,  1f, -4f,
		       -1f, -1f,-6f,
		       -1f, 1f, -6f,  
		       1f,  1f, -6f,  
		       1f, -1f, -6f,
		};
	private short[] Index = new short[] {
			0, 1, 
			1, 2,
			2, 0,
			
			1, 2,
			2, 3,
			3, 1,
			
			2, 3,
			3, 7,
			7, 2,
			
			3, 6,
			6, 7,
			7, 3,
			
			6, 4,
			4, 7,
			7, 6,
			
			6, 5,
			5, 4,
			4, 6,
			
			5, 1,
			1, 4,
			4, 5,
			
			1, 0,
			0, 4,
			4, 1,
			
			5, 3,
			3, 1,
			1, 5,
			
			3, 6,
			6, 5,
			5, 3,
			
			0, 4,
			4, 2,
			2, 0,
			
			4, 7,
			7, 2,
			2, 0 
	};
	
    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
    	// Se crean buffers y se guardan en ellos los vertices e indices,
    	// por ser java se debe ejecutar lo siguiente para evitar el garbage collector
    	// El 4 y el 2 son por el tamaño de un float y un short respectivamentes
    	VertexBuffer = ByteBuffer.allocateDirect(4 * Vertices.length)
    			.order(ByteOrder.nativeOrder()).asFloatBuffer();
    	IndexBuffer = ByteBuffer.allocateDirect(2 * Index.length)
    			.order(ByteOrder.nativeOrder()).asShortBuffer();
    	//VertexBuffer.put(Vertices);
    	//VertexBuffer.position(0);
    	for (int i = 0; i < Vertices.length; ++i)
    		VertexBuffer.put(i, Vertices[i]);
    	
    	for (int i = 0; i < Index.length; ++i)
    		IndexBuffer.put(i, Index[i]);
	}

    public void onSurfaceChanged(GL10 gl, int w, int h) {
        gl.glViewport(0, 0, w, h);
        Log.i("DGC","Widht: "+ w + " Height: "+ h);
        // make adjustments for screen ratio
        float ratio = (float) w / h;
        gl.glMatrixMode(GL10.GL_PROJECTION);        // set matrix to projection mode
        gl.glLoadIdentity();                        // reset the matrix to its default state
        gl.glFrustumf(-ratio, ratio, -1, 1, 1, 10);  // apply the projection matrix

    }

    public void onDrawFrame(GL10 gl) {
        gl.glClearColor(mRed, mGreen, mBlue, 1.0f);
        gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
        gl.glMatrixMode(GL10.GL_MODELVIEW);
        gl.glLoadIdentity();
        GLU.gluLookAt(gl, 0, 0, -5, 0f, 0f, 0f, 0f, 1.0f, 0.0f); // Colocar la camara
    	//gl.glFrontFace(GL10.GL_CCW); // OpenGL docs
		// Enable face culling.
		//gl.glEnable(GL10.GL_CULL_FACE); // OpenGL docs
		// What faces to remove with the face culling.
		//gl.glCullFace(GL10.GL_BACK); // OpenGL docs
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY); // para poder leer de buffer
        gl.glTranslatef(0, 0, -5);
        gl.glRotatef(movY, 1f, 0f, 0f);
        gl.glRotatef(movX, 0, 1, 0);
        gl.glTranslatef(0, 0, 5);
        gl.glVertexPointer(3, GL10.GL_FLOAT, 0, VertexBuffer);
        gl.glDrawElements(GL10.GL_LINES, Index.length, GL10.GL_UNSIGNED_SHORT, IndexBuffer);
        gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
        //gl.glDisable(GL10.GL_CULL_FACE); 
    }

    public void setColor(float r, float g, float b) {
        mRed = r;
        mGreen = g;
        mBlue = b;
    }
    public void moveView(float x, float y){
    	movX += x/100;
    	movY += y/100;
    	Log.i("DGC", "Moving View  X: " + movX + " Y : " + movY);
    }
    
    private float mRed;
    private float mGreen;
    private float mBlue;
}