(defun def_matrix ()
  (format t "~%Indique la primera dimension de la matriz.~%")
  (setq n (read))
  (format t "~%Indique la segunda dimension de la matriz.~%")
  (setq m (read))
  (setf matriz (make-array (list n m)))
  (dotimes (x n)
    (dotimes (y m)
      (format t "~%Indique el valor de la matrix M[~A][~A].~%" x y)
      (setf (aref matriz x  y) (read))
    )
  )
)

(defun max_min_matrix (matriz)
      (print matriz)
  (let (
      (n (first (array-dimensions matriz)))
      (m (second (array-dimensions matriz)))
      (max 0)
      (min 999999)
      (temp 0)
     )
    (dotimes (x n)
      (dotimes (y m)
        (setq temp (aref matriz x y))
        (if (< temp min)
            (setq min temp)
        )
        (if (> temp max)
            (setq max temp)
        )
     )
    )
    (format t "~% El mayor valor es ~A~%" max)
    (format t "~% El menor valor es ~A~%" min)
  )
)

(defun familia (direccion)
	(setf lista
		(with-open-file (file direccion)
			(do (
				(result nil (cons next1 result))
				(next1 (read file nil 'eof) (read file nil 'eof))
				(next2 (read file nil 'eof) (read file nil 'eof))
				(next3 (read file nil 'eof) (read file nil 'eof))
			)
			((equal next1 'eof) (reverse result))
			(setf (get next1 'yo) next1)
			(setf (get next1 'padre) next2)
			(setf (get next1 'madre) next3)
		)
	))
	(print lista)
)

(defun busca_abuelos (famila hijo)
	(format t 
		"~20T Abuelo Paterno ~5T Abuela Paterna ~5T Abuelo Materno ~5T Abuela Materna~%
	Sujeto:~s~25T~s~42T~s~58T~s~75T~s"
		hijo
		(get (get hijo 'padre) 'padre)
		(get (get hijo 'padre) 'madre)
		(get (get hijo 'madre) 'padre)
		(get (get hijo 'madre) 'madre))
)

(defun ins_jug (direccion)
	(defstruct Jugadores Nombre Partidos Goles Faltas)
	(setf Lista
		(with-open-file (fd direccion)
   			(let ((result nil)) 
   				(do (
        				(next1 (read fd nil 'eof) (read fd nil 'eof))
        				(next2 (read fd nil 'eof) (read fd nil 'eof))
        				(next3 (read fd nil 'eof) (read fd nil 'eof))
        				(next4 (read fd nil 'eof) (read fd nil 'eof))
       					)
       					( (equal next1 'eof) (reverse result) )
       
         				(setf Player 
						(dolist (ele result) 
							(if (equal next1 (Jugadores-nombre ele)) 
								(return ele) 
								nil
							) 
						)
					)
         				(cond ((equal Player nil)
	        				(setf Jugador (make-jugadores))
	        				(setf (Jugadores-nombre Jugador) next1)
                				(setf (Jugadores-partidos Jugador) next2)
                				(setf (Jugadores-goles Jugador) next3)
                				(setf (Jugadores-faltas Jugador) next4)
						(setf result (cons Jugador result))
               				)
               				( t
                				(setf (Jugadores-partidos Player) 
							(+ (Jugadores-partidos Player) next2))
                				(setf (Jugadores-goles Player) 
							(+ (Jugadores-goles Player) next3))       
                				(setf (Jugadores-faltas Player) 
							(+ (Jugadores-faltas Player) next4))         
               				)
        	 		)
    			)
    		)
	)
	)
)


(defun tabla_jug (l_jug)
	(format t "Resumen de Estadisticas del Equipo~%")
	(format t "Jugador ~10T Partidos ~10T Goles ~10T Promedio ~10T Faltas ~10T Promedio ~%") 
	(format t "----------------------------------------------------------~%") 
	(dolist (elem l_jug) 
		(format t "~s ~16T ~s ~25T ~s ~32T ~s ~42T ~s ~52T ~s~%" 
			(Jugadores-nombre elem) 
			(Jugadores-partidos elem) 
			(Jugadores-goles elem) 
			(/ (Jugadores-goles elem) (Jugadores-partidos elem))
			(Jugadores-faltas elem) 
			(/ (Jugadores-faltas elem) (Jugadores-partidos elem))
		)
	)
)



(defun mod_lista (l direccion)
	(format t "Introduzca el nombre del jugador a modificar: ")
  	(setf dnombre (read))
  	(format t "Nuevos partidos: ")
  	(setf dpart (read))
  	(format t "Nuevos goles: ")
  	(setf dgol (read))
  	(format t "Nuevas faltas: ")
  	(setf dfalt (read))
  	(setf Player (dolist (elem l) 
		(if (equal dnombre (Jugadores-nombre elem)) 
			(return elem) 
			nil
		) 
	))
  	(setf (Jugadores-partidos Player) dpart)
  	(setf (Jugadores-goles Player) dgol)
  	(setf (Jugadores-faltas Player) dfalt)
  	(tabla_jug l)
  	(format t "Generando fichero de salida...~%")
    	(with-open-file (out_fd direccion :direction :output)
	(format out "Resumen de Estadisticas del Equipo~%")
	(format t "Jugador ~10T Partidos ~10T Goles ~10T Promedio ~10T Faltas ~10T Promedio ~%") 
	(format t "----------------------------------------------------------~%") 
	(dolist (elem l) 
		(format t "~s ~16T ~s ~25T ~s ~32T ~s ~42T ~s ~52T ~s~%" 
			(Jugadores-nombre elem) 
			(Jugadores-partidos elem) 
			(Jugadores-goles elem) 
			(/ (Jugadores-goles elem) (Jugadores-partidos elem))
			(Jugadores-faltas elem) 
			(/ (Jugadores-faltas elem) (Jugadores-partidos elem))
		)
	)
    )
  (format t "Fichero de salida generado correctamente.~%")
)
